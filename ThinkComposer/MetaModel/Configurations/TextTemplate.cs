using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;

using Instrumind.Common.EntityBase;
using Instrumind.Common.EntityDefinition;
using Instrumind.Common.Visualization;

using Instrumind.ThinkComposer.MetaModel.GraphMetaModel;

/// Provides configuration information for meta-models.
namespace Instrumind.ThinkComposer.MetaModel.Configurations
{
    /// <summary>
    /// Defines a template for text based file generation.
    /// </summary>
    [Serializable]
    public class TextTemplate : IModelEntity, IModelClass<TextTemplate>
    {
        /// <summary>
        /// Static constructor
        /// </summary>
        static TextTemplate()
        {
            __ClassDefinitor = new ModelClassDefinitor<TextTemplate>("TextTemplate", null, "Text Template",
                                                                     "Defines a template for text based file generation.");
            __ClassDefinitor.DeclareProperty(__Language);
            __ClassDefinitor.DeclareProperty(__Text);
            __ClassDefinitor.DeclareProperty(__ExtendsBaseTemplate);
        }

        public TextTemplate(ExternalLanguageDeclaration Language, string Text, bool ExtendsBaseTemplate = true)
        {
            this.Language = Language;
            this.Text = Text;
            this.ExtendsBaseTemplate = ExtendsBaseTemplate;
        }

        /// <summary>
        /// Language of the Template.
        /// </summary>
        public ExternalLanguageDeclaration Language { get { return __Language.Get(this); } set { __Language.Set(this, value); } }
        protected ExternalLanguageDeclaration Language_;
        public static readonly ModelPropertyDefinitor<TextTemplate, ExternalLanguageDeclaration> __Language =
                   new ModelPropertyDefinitor<TextTemplate, ExternalLanguageDeclaration>("Language", EEntityMembership.External, null, EPropertyKind.Common, ins => ins.Language_, (ins, val) => ins.Language_ = val, false, false,
                                                                                         "Language", "Language of the Template.");

        /// <summary>
        /// Text of the Template.
        /// </summary>
        public string Text { get { return __Text.Get(this); } set { __Text.Set(this, value); } }
        protected string Text_;
        public static readonly ModelPropertyDefinitor<TextTemplate, string> __Text =
                   new ModelPropertyDefinitor<TextTemplate, string>("Text", EEntityMembership.InternalCoreExclusive, null, EPropertyKind.Common, ins => ins.Text_, (ins, val) => ins.Text_ = val, false, false,
                                                                    "Text", "Text of the Template.");

        /// <summary>
        /// Indicates that text generated with this Template will be appended to that generated by the base Template (defined at the Domain level for this kind of Ideas). Else, the base Template will be ignored.
        /// </summary>
        public bool ExtendsBaseTemplate { get { return __ExtendsBaseTemplate.Get(this); } set { __ExtendsBaseTemplate.Set(this, value); } }
        protected bool ExtendsBaseTemplate_;
        public static readonly ModelPropertyDefinitor<TextTemplate, bool> __ExtendsBaseTemplate =
                   new ModelPropertyDefinitor<TextTemplate, bool>("ExtendsBaseTemplate", EEntityMembership.InternalCoreExclusive, null, EPropertyKind.Common, ins => ins.ExtendsBaseTemplate_, (ins, val) => ins.ExtendsBaseTemplate_ = val, false, false,
                                                                  "Extends Base Template", "Indicates that text generated with this Template will be appended to that generated by the base Template (defined at the Domain level for this kind of Ideas). Else, the base Template will be ignored.");

        // ---------------------------------------------------------------------------------------------------------------------------------------------------------
        #region IModelClass<TextTemplate> Members

        public MModelClassDefinitor ClassDefinition { get { return __ClassDefinitor; } }
        public ModelClassDefinitor<TextTemplate> ClassDefinitor { get { return __ClassDefinitor; } }
        public static readonly ModelClassDefinitor<TextTemplate> __ClassDefinitor = null;

        public virtual object CreateCopy(ECloneOperationScope CloningScope, IMModelClass DirectOwner) { return this.CreateClone(CloningScope, DirectOwner); }
        public TextTemplate CreateClone(ECloneOperationScope CloningScope, IMModelClass DirectOwner, bool AsActive = true) { return this.ClassDefinitor.PopulateInstance((TextTemplate)this.MemberwiseClone(), this, DirectOwner, CloningScope, true, AsActive); }
        public TextTemplate PopulateFrom(TextTemplate SourceElement, IMModelClass DirectOwner = null, ECloneOperationScope CloningScope = ECloneOperationScope.Slight, params string[] MemberNames) { return this.ClassDefinitor.PopulateInstance(this, SourceElement, DirectOwner, CloningScope, false, true, MemberNames); }

        #endregion

        // ---------------------------------------------------------------------------------------------------------------------------------------------------------
        #region IModelEntity Members

        public EntityEditEngine EditEngine { get { return EntityEditEngine.ObtainEditEngine(this, EditEngine_); } set { EditEngine_ = value; } }
        [NonSerialized]
        private EntityEditEngine EditEngine_ = null;

        public virtual void RefreshEntity() { }

        public virtual MEntityInstanceController Controller { get { return this.Controller_; } set { this.Controller_ = value; } }
        [NonSerialized]
        private MEntityInstanceController Controller_ = null;

        #endregion

        #region INotifyPropertyChanged Members

        [field: NonSerialized]
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Notifies all entity subscriptors that a property, identified by the supplied definitor, has changed.
        /// </summary>
        public void NotifyPropertyChange(MModelPropertyDefinitor PropertyDefinitor)
        {
            this.NotifyPropertyChange(PropertyDefinitor.TechName);
        }

        /// <summary>
        /// Notifies all entity subscriptors that a property, identified by the supplied name, has changed.
        /// </summary>
        public void NotifyPropertyChange(string PropertyName)
        {
            var Handler = PropertyChanged;

            if (Handler != null)
                Handler(this, new PropertyChangedEventArgs(PropertyName));
        }

        #endregion

        // ---------------------------------------------------------------------------------------------------------------------------------------------------------
    }
}
